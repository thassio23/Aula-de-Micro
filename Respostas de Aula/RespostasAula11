1. Defina a função void Atraso(volatile unsigned long int x); que fornece um atraso de 'x' milissegundos. Utilize o Timer_A para a contagem de tempo, e assuma que o SMCLK já foi configurado para funcionar a 1 MHz. Esta função poderá ser utilizada diretamente nas outras questões desta prova.

void Atraso(volatile unsigned long int x){
  
                long int i;
                x = 65*x;
                
                while((TA0CTL & TAIFG)==0);
                for(i=0;i<x;i++);
		TA0CTL &= ~TAIFG;
  
}

2. Pisque os LEDs da Launchpad numa frequência de 100 Hz.

#include <msp430g2553.h>

int main(void)
{
	WDTCTL = WDTPW + WDTHOLD;
	int x;
	BCSCTL1 = CALBC1_1MHZ;		
	DCOCTL = CALDCO_1MHZ;		
	P1OUT = 0;
	P1DIR |= BIT0 + BIT6;
	TA0CCR0 = 1;
	TA0CTL = TASSEL_2 + ID_3 + MC_3;
        
        x = 10; // 10 milisegundos
	while(1)
	{       
          Atraso(x);
	  P1OUT ^= BIT0 + BIT6;
	}
	return 0;
}

3. Pisque os LEDs da Launchpad numa frequência de 20 Hz.

#include <msp430g2553.h>

int main(void)
{
	WDTCTL = WDTPW + WDTHOLD;
	int x;
	BCSCTL1 = CALBC1_1MHZ;		
	DCOCTL = CALDCO_1MHZ;		
	P1OUT = 0;
	P1DIR |= BIT0 + BIT6;
	TA0CCR0 = 1;
	TA0CTL = TASSEL_2 + ID_3 + MC_3;
        
        x = 50; // 50 milisegundos
	while(1)
	{       
          Atraso(x);
	  P1OUT ^= BIT0 + BIT6;
	}
	return 0;
}

4. Pisque os LEDs da Launchpad numa frequência de 1 Hz.

#include <msp430g2553.h>

int main(void)
{
	WDTCTL = WDTPW + WDTHOLD;
	int x;
	BCSCTL1 = CALBC1_1MHZ;		
	DCOCTL = CALDCO_1MHZ;		
	P1OUT = 0;
	P1DIR |= BIT0 + BIT6;
	TA0CCR0 = 1;
	TA0CTL = TASSEL_2 + ID_3 + MC_3;
        
        x = 1000; // 1000 milisegundos
	while(1)
	{       
          Atraso(x);
	  P1OUT ^= BIT0 + BIT6;
	}
	return 0;
}


5. Pisque os LEDs da Launchpad numa frequência de 0,5 Hz.

#include <msp430g2553.h>

int main(void)
{
	WDTCTL = WDTPW + WDTHOLD;
	int x;
	BCSCTL1 = CALBC1_1MHZ;		
	DCOCTL = CALDCO_1MHZ;		
	P1OUT = 0;
	P1DIR |= BIT0 + BIT6;
	TA0CCR0 = 1;
	TA0CTL = TASSEL_2 + ID_3 + MC_3;
        
        x = 2000; // 2000 milisegundos
	while(1)
	{       
          Atraso(x);
	  P1OUT ^= BIT0 + BIT6;
	}
	return 0;
}

6. Repita as questões 2 a 5 usando a interrupção do Timer A para acender ou apagar os LEDs.

#include "msp430g2231.h"  
void main(void)
{
  WDTCTL = WDTPW + WDTHOLD;       
  CCTL0 = CCIE;                            
  TACTL = TASSEL_2 + MC_1 + ID_3;          
  CCR0 =  1;                       
  P1OUT &= 0x00;               
  P1DIR &= 0x00;               
  P1DIR |= BIT0 + BIT6;            
  _BIS_SR(CPUOFF + GIE);           
  while(1)                                                                                
  {}
} 
#pragma vector=TIMERA0_VECTOR 
__interrupt void Timer_A (void) 
{   
   long int i;
   long int x;
   x = 10;
   x = 65*x;
   for(i=0;i<x;i++);
   P1OUT ^= BIT0;                                                                                 
}


//////////////////////////////////



#include "msp430g2231.h"  
void main(void)
{
  WDTCTL = WDTPW + WDTHOLD;                                                             
  CCTL0 = CCIE;                             
  TACTL = TASSEL_2 + MC_1 + ID_3;                                                                  
  CCR0 =  1;                                                                             
  P1OUT &= 0x00;                                                                     
  P1DIR &= 0x00;               
  P1DIR |= BIT0 + BIT6;                                                                  
  _BIS_SR(CPUOFF + GIE);                                                                 
  while(1)                                                                                 
  {}
} 
#pragma vector=TIMERA0_VECTOR 
__interrupt void Timer_A (void) 
{   
   long int i;
   long int x;
   x = 50;
   x = 65*x;
   for(i=0;i<x;i++);
   P1OUT ^= BIT0;                                                                                
} 

////////////////////////////////////////

#include "msp430g2231.h"  
void main(void)
{
  WDTCTL = WDTPW + WDTHOLD;                                                            
  CCTL0 = CCIE;                                                                                   
  TACTL = TASSEL_2 + MC_1 + ID_3;                                                                 
  CCR0 =  1;                                                                            
  P1OUT &= 0x00;                                                                                                                          
  P1DIR &= 0x00;               
  P1DIR |= BIT0 + BIT6;                                                                  
  _BIS_SR(CPUOFF + GIE);                                                                 
  while(1)                                                                                 
  {}
} 
#pragma vector=TIMERA0_VECTOR 
__interrupt void Timer_A (void) 
{   
   long int i;
   long int x;
   x = 1000;
   x = 65*x;
   for(i=0;i<x;i++);
   P1OUT ^= BIT0;                                                                                 
} 

////////////////////////////////////////////////

#include "msp430g2231.h"  
void main(void)
{
  WDTCTL = WDTPW + WDTHOLD;                                                            
  CCTL0 = CCIE;                                                                                   
  TACTL = TASSEL_2 + MC_1 + ID_3;                                                            
  CCR0 =  1;                    
  P1OUT &= 0x00;             
  P1DIR &= 0x00;               
  P1DIR |= BIT0 + BIT6;           
  _BIS_SR(CPUOFF + GIE);        
  while(1)                          
  {}
} 
#pragma vector=TIMERA0_VECTOR 
__interrupt void Timer_A (void) 
{   
   long int i;
   long int x;
   x = 2000;
   x = 65*x;
   for(i=0;i<x;i++);
   P1OUT ^= BIT0;                        
} 

//////////////////////////////////////////////////////////

7. Defina a função void paralelo_para_serial(void); que lê o byte de entrada via porta P1 e transmite os bits serialmente via pino P2.0. Comece com um bit em nivel alto, depois os bits na ordem P1.0 - P1.1 - … - P1.7 e termine com um bit em nível baixo. Considere um período de 1 ms entre os bits.

#include "msp430g2553.h" 

void Atraso(volatile unsigned long int x){
  
                long int i;
                x = 65*x;
                
                while((TA0CTL & TAIFG)==0);
                for(i=0;i<x;i++);
		TA0CTL &= ~TAIFG;
  
}

void paralelo_para_serial(void){
    int i;
    int x0;
    int x1;
    int x2;
    int x3;
    int x4;
    int x5;
    int x6;
    int x7;
    int z[8];
    x0 = 0x01;
    x1 = 0x02;
    x2 = 0x04;
    x3 = 0x08;
    x4 = 0x10;
    x5 = 0x20;
    x6 = 0x40;
    x7 = 0x80;
        if((x0 & P1IN) == x0){
      z[0] = 1;
    }else {z[0] = 0;}
        if((x1 & P1IN) == x1){
      z[1] = 1;
    }else {z[1] = 0;}
        if((x2 & P1IN) == x2){
      z[2] = 1;
    }else {z[2] = 0;}
        if((x3 & P1IN) == x3){
      z[3] = 1;
    }else {z[3] = 0;}
        if((x4 & P1IN) == x4){
      z[4] = 1;
    }else {z[4] = 0;}
        if((x5 & P1IN) == x5){
      z[5] = 1;
    }else {z[5] = 0;}
        if((x6 & P1IN) == x6){
      z[6] = 1;
    }else {z[6] = 0;}
        if((x7 & P1IN) == x7){
      z[7] = 1;
    }else {z[7] = 0;}
    for(i=0;i<8;i++){
      Atraso(1); // atrasa 1 milisegundo
     P2OUT = z[i];
    }

}
void main(void)
{
  WDTCTL = WDTPW + WDTHOLD;
  BCSCTL1 = CALBC1_1MHZ;		
  DCOCTL = CALDCO_1MHZ;	
  TA0CCR0 = 1;
  TA0CTL = TASSEL_2 + ID_3 + MC_3;
  P2OUT = 0x01;              
  P1DIR = 0x00;   
  P2DIR = 0x01;

  while(1)                         
  {
  paralelo_para_serial();
  }
} 

8. Faça o programa completo que lê um byte de entrada serialmente via pino P2.0 e transmite este byte via porta P1. O sinal serial começa com um bit em nivel alto, depois os bits na ordem 0-7 e termina com um bit em nível baixo. Os pinos P1.0-P1.7 deverão corresponder aos bits 0-7, respectivamente. Considere um período de 1 ms entre os bits.

#include "msp430g2553.h" 
void Atraso(volatile unsigned long int x){
                long int i;
                x = 65*x;
                while((TA0CTL & TAIFG)==0);
                for(i=0;i<x;i++);
		TA0CTL &= ~TAIFG;
}
void serial_para_paralelo(void){
   P1OUT = (P2IN & 0x01);
   Atraso(1);
   P1OUT = ((P2IN+1) & 0x02);
   Atraso(1);
   P1OUT = ((P2IN+3) & 0x04);
   Atraso(1);
   P1OUT = ((P2IN+7) & 0x08);
   Atraso(1);
   P1OUT = ((P2IN+15) & 0x10);
   Atraso(1);
   P1OUT = ((P2IN+31) & 0x20);
   Atraso(1);
   P1OUT = ((P2IN+63) & 0x40);
   Atraso(1);
   P1OUT = ((P2IN+127) & 0x80);
   Atraso(1);
}
void main(void)
{
  WDTCTL = WDTPW + WDTHOLD;
  BCSCTL1 = CALBC1_1MHZ;		
  DCOCTL = CALDCO_1MHZ;	
  TA0CCR0 = 1;
  TA0CTL = TASSEL_2 + ID_3 + MC_3;
  P1OUT = 0x00;              
  P1DIR = 0xFF;   
  P2DIR = 0x00;

  while(1)                         
  {
  serial_para_paralelo();
  }
} 



9. Defina a função void ConfigPWM(volatile unsigned int freqs, volatile unsigned char ciclo_de_trabalho); para configurar e ligar o Timer_A em modo de comparação. Considere que o pino P1.6 já foi anteriormente configurado como saída do canal 1 de comparação do Timer_A, que somente os valores {100, 200, 300, …, 1000} Hz são válidos para a frequência, que somente os valores {0, 25, 50, 75, 100} % são válidos para o ciclo de trabalho, e que o sinal de clock SMCLK do MSP430 está operando a 1 MHz.

void ConfigPWM(volatile unsigned int freqs, volatile unsigned char ciclo_de_trabalho){

void frequencia(int m){
                long int i,x,y;
                y = 1000/m;  
		x = 65*y;
                while((TA0CTL & TAIFG)==0);
                for(i=0;i<x;i++);
		TA0CTL &= ~TAIFG;
}

   if(ciclo_de_trabalho == '0'){
      P1OUT = 0;
   }
   
      if(ciclo_de_trabalho == '2'){
      P1OUT = 0;
      frequencia(0.25*freqs);
      P1OUT = BIT6;
      frequencia(0.75*freqs);
      
   }
   
         if(ciclo_de_trabalho == '5'){
      P1OUT ^= BIT6;
      frequencia(freqs);

      
   }
      if(ciclo_de_trabalho == '7'){
      P1OUT = 0;
      frequencia(0.75*freqs);
      P1OUT = BIT6;
      frequencia(0.25*freqs);
   }
      if(ciclo_de_trabalho == '1'){
      P1OUT = BIT6;
   }

}
















