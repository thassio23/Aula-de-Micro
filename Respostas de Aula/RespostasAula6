Para cada questão, escreva funções em C e/ou sub-rotinas na linguagem Assembly do MSP430. Reaproveite funções e sub-rotinas de uma questão em outra, se assim desejar. Leve em consideração que as sub-rotinas são utilizadas em um código maior, portanto utilize adequadamente os registradores R4 a R11. As instruções da linguagem Assembly do MSP430 se encontram ao final deste texto.

1. (a) Escreva uma função em C que calcule a raiz quadrada 'x' de uma variável 'S' do tipo float, utilizando o seguinte algoritmo: após 'n+1' iterações, a raiz quadrada de 'S' é dada por

	unsigned int Raiz_Quadrada(unsigned int S)

	{
	    float x[1000];
	    float a;
        int n;

        n == 0;
	    x[0] = S/2;


        for(n=0;n<1000;n++){

                x[n+1] = (x[n] + (S/x[n]))/2;
        }
        a = x[1000];
        return a;
	}

(b) Escreva a sub-rotina equivalente na linguagem Assembly do MSP430. A variável 'S' é fornecida pelo registrador R15, e a raiz quadrada de 'S' (ou seja, a variável 'x') é fornecida pelo registrador R15 também.

Raiz_Quadrada:
        
	MOV.W numero,R6 ; VALOR DE ENTRADA
        MOV.W #0,R10                 
        MOV.W #0,R14                 
        MOV.W #20,R15                 
        MOV.W R6,R7
        MOV.W R6,R8
        MOV.W R6,R9
        RRA.w R8
        JMP divisao

divisao:
        ADD.W #1,R14
        SUB.W R8,R9
        ADD.W #1, R10
        CMP R9,R8
        jl divisao
        jeq final_divisao
        jne fim
final_divisao:
        ADD.W #1,R10
        
fim:    
        MOV.W R8,R11
        ADD.W R10,R11
        RRA.W R11
        MOV.W R11,R8
        CMP #3,R14
        jne divisao
	MOV.W R8,R15
	RET

2. (a) Escreva uma função em C que calcule 'x' elevado à 'N'-ésima potência, seguindo o seguinte protótipo: 

	int Potencia(int x, int N)
	{
        if(N <= 1){
        return x;
		}
        if(N ==0){
        return 0;
        }
		return x*Potencia(x, --N);
	}

(b) Escreva a sub-rotina equivalente na linguagem Assembly do MSP430. 'x' e 'n' são fornecidos através dos registradores R15 e R14, respectivamente, e a saída deverá ser fornecida no registrador R15.

funcPOTENCIA:
         
         MOV.W #5,R15 ; VALOR DE ENTRADA
         MOV.W #4,R14 ; VALOR DE ENTRADA
         MOV.W #1, R7
         MOV.W R15, R10
         MOV.W #1,R9
         MOV.W R15,R5
         MOV.W R5,R8
         MOV.W R14, R6

MULTIPLICACAO:
         CMP R7, R5
         JEQ POTENCIA
         ADD.W #1,R7
         ADD.W R8,R10
         jmp MULTIPLICACAO

POTENCIA:
        
        MOV.W R10,R5
        MOV.W #0,R10
        ADD.W #1,R9
        CMP R14,R9
        MOV.W #0,R7
        JNE MULTIPLICACAO
        MOV.W R5, R15
	RET

3. Escreva uma sub-rotina na linguagem Assembly do MSP430 que calcula a divisão de 'a' por 'b', onde 'a', 'b' e o valor de saída são inteiros de 16 bits. 'a' e 'b' são fornecidos através dos registradores R15 e R14, respectivamente, e a saída deverá ser fornecida através do registrador R15.
	
	MOV.W #8,R6 ;valores de entrada
        MOV.W #3,R8 ;valores de entrada
funcdivisao:
        MOV.W #0,R10                 
        MOV.W #0,R14     
        MOV.W #8,R6
        MOV.W R6,R7
        MOV.W R6,R9
        JMP divisao

divisao:
        ADD.W #1,R14
        SUB.W R8,R9
        ADD.W #1, R10
        CMP R9,R8
        jl divisao
        jeq final_divisao
        jne fim
final_divisao:
        ADD.W #1,R10
        
fim:    
        MOV.W R10,R15
	RET
4. Escreva uma sub-rotina na linguagem Assembly do MSP430 que calcula o resto da divisão de 'a' por 'b', onde 'a', 'b' e o valor de saída são inteiros de 16 bits. 'a' e 'b' são fornecidos através dos registradores R15 e R14, respectivamente, e a saída deverá ser fornecida através do registrador R15.

        MOV.W #8,R6 ;valores de entrada
        MOV.W #5,R8 ;valores de entrada
        
funcresto:
        MOV.W #0,R10                 
        MOV.W #0,R14     
        MOV.W #8,R6
        MOV.W R6,R7
        MOV.W R6,R9
        JMP divisao

divisao:
        ADD.W #1,R14
        SUB.W R8,R9
        ADD.W #1, R10
        CMP R9,R8
        jl divisao
        jeq final_divisao
        jne fim
final_divisao:
        ADD.W #1,R10
        MOV.W #0,R9
        
fim:    
        MOV.W R9,R15
	RET
5. (a) Escreva uma função em C que indica a primalidade de uma variável inteira sem sinal, retornando o valor 1 se o número for primo, e 0, caso contrário. Siga o seguinte protótipo:

	int Primalidade(unsigned int x)
	{   int i;
	    int m;
	    for(i = 2; i<10;i++){
        if(x%i == 0){
            m++;
        }
	    }
	    if( m == 0){
        return 1;
	    }
	    if(x < 10 && m == 1){
            return 1;
	    }
	    if(x < 10 && m > 1){
	    return 0;}
	    if(m != 0 && x>=10){
        return 0;
	    }
	}

(b) Escreva a sub-rotina equivalente na linguagem Assembly do MSP430. A variável de entrada é fornecida pelo registrador R15, e o valor de saída também.

Primalidade:

comeco: MOV.W #2,R8 
        MOV.W #0,R5
        MOV.W #1,R13
trocanumero:
        MOV.W #8,R9 ;valores de entrada
        ADD.W #1,R8     
        MOV.W #0,R14
        MOV.W #1,R10
        CMP #1,R9
        JEQ retornaum
        CMP #3,R9
        JEQ retornaum
        CMP #5,R9
        JEQ retornaum
        CMP #7,R9
        JEQ retornaum
divisao:
        ADD.W #1,R14
        SUB.W R8,R9
        ADD.W #1, R10
        CMP R9,R8
        jl divisao
        jeq final_divisao
        jne fim
final_divisao:
        ADD.W #1,R10
        MOV.W #0,R9       
fim:    
        MOV.W R9,R15
        CMP #0,R15
        JEQ somaum
        CMP #9,R13
        JEQ acabou
        INC.W R13
        JMP trocanumero
        
somaum:
        ADD.W #1,R13
        ADD.W #1,R5
        CMP.W #9,R13
        JEQ acabou
        JMP trocanumero
acabou:
        CMP #0,R5
        JEQ retornaum
        JMP retornazero
retornazero:
        MOV.W #0,R15
        jmp VERYEND
retornaum:
        MOV.W #1,R15
VERYEND:
	RET
6. Escreva uma função em C que calcula o duplo fatorial de n, representado por n!!. Se n for ímpar, n!! = 1*3*5*...*n, e se n for par, n!! = 2*4*6*...*n. Por exemplo, 9!! = 1*3*5*7*9 = 945 e 10!! = 2*4*6*8*10 = 3840. Além disso, 0!! = 1!! = 1.
O protótipo da função é:

	unsigned long long DuploFatorial(unsigned long long n)
	{
	    unsigned long long i;
	    unsigned long long j;
	    unsigned long long k;
	    unsigned long long l;

	    k = n;
	    l = n;

	if (n == 0){
	return 1;
	}
	    for(i = 1; n > 1; n--){
        if(n%2 == 0){
            i *= n;
        }
        }

        for(j = 1; k > 1; k--){
        if(k%2 == 1){
            j *= k;
        }
        }
        if(l%2 == 1){
            return j;
        }
        if(l%2 == 0){
            return i;
        }
	}

7. (a) Escreva uma função em C que calcula a função exponencial da seguinte forma:
	
int ExpTaylor(double x){
    int i,j,z,numero;
    double recebe;
    double b;
    double xelv[20];
    double nfat[20];
    b = x;
    numero = 1;
    recebe = 0;
    xelv[0]=1;
    xelv[1]= x;
    nfat[0]=1;
    for(i = 0;i < 10; i++){
        x = x * b;
        xelv[i+2] = x;
    }
  for(j=1; j<=9; ++j)
        {
            numero *= j;
            nfat[j] = numero;
        }
  for(z=0;z < 10; z++){
    recebe = recebe + (xelv[z]/nfat[z]);
  }
  return recebe;
}

(b) Escreva a sub-rotina equivalente na linguagem Assembly do MSP430, mas considere que os valores de entrada e de saída são inteiros de 16 bits. A variável de entrada é fornecida pelo registrador R15, e o valor de saída também.

FUNCEXPONENCIAL:

            MOV.W #2,R6 ; entrada
            MOV.W #1,R12
            MOV.W #1,R11
exponencial:            
            CMP #5,R12
            JEQ acaba
            call #funcfatorial
            MOV.W #2,R6 ; entrada
            MOV.W #1,R7
            MOV.W #0,R9
            call #funcPOTENCIA
            MOV.W #0,R10
            call #divisao
            ADD.W R11,R13
            MOV.W R13,R11
            INC.W R12
            JMP exponencial
acaba: 
	  MOV.W R13,R15
          RET
funcfatorial:
         
         MOV.W R12,R15
         MOV.W #1, R7
         MOV.W R15, R10
         MOV.W #1,R9
         MOV.W R15,R5
         MOV.W R15,R8
         DEC.W R5

         CMP #0,R15
         JEQ igualumf
         CMP #1,R15
         JEQ igualumf
         CMP #2,R15
         JEQ igualdoisf
         JMP MULTIPLICACAOf
igualumf:
          MOV.W #1,R4
          RET
igualdoisf:
          MOV.W #2,R4
          RET
MULTIPLICACAOf:
         CMP R7, R5
         JEQ POTENCIAf
         ADD.W #1,R7
         ADD.W R8,R10
         jmp MULTIPLICACAOf
POTENCIAf:
        DEC.W R5
        CMP #1,R5
        JEQ FIMf
        MOV.W #1,R7
        MOV.W R10,R8
        JNE MULTIPLICACAOf
FIMf:
        MOV.W R10, R4
        RET
funcPOTENCIA: 
         MOV.W R6,R15 ; 
         MOV.W R12,R14 ; 
         MOV.W #1, R7
         MOV.W R6, R10
         MOV.W #1,R9
         MOV.W R15,R5
         MOV.W R5,R8
         MOV.W R14, R6
         CMP #1,R12
         JNE MULTIPLICACAO
         RET        
MULTIPLICACAO:
         CMP R7, R5
         JEQ POTENCIA
         ADD.W #1,R7
         ADD.W R8,R10
         jmp MULTIPLICACAO
POTENCIA:     
        MOV.W R10,R5
        MOV.W #0,R10
        ADD.W #1,R9
        CMP R14,R9
        MOV.W #0,R7
        JNE MULTIPLICACAO
        MOV.W R5, R15
        RET
divisao:
        SUB.W R4,R15
        ADD.W #1, R10
        CMP R15,R4
        jl divisao
        jeq final_divisao
        jne fimno
final_divisao:
        ADD.W #1,R10
fimno:
      MOV.W R10,R13
        RET

8. Escreva uma sub-rotina na linguagem Assembly do MSP430 que indica se um vetor esta ordenado de forma decrescente. Por exemplo:
[5 4 3 2 1] e [90 23 20 10] estão ordenados de forma decrescente.
[1 2 3 4 5] e [1 2 3 2] não estão.
O primeiro endereço do vetor é fornecido pelo registrador R15, e o tamanho do vetor é fornecido pelo registrador R14. A saída deverá ser fornecida no registrador R15, valendo 1 quando o vetor estiver ordenado de forma decrescente, e valendo 0 em caso contrário.

ehdecrescente:

        MOV.W #4,R5 ; Entrada tamanho do vetor      
        MOV.W #6,0(R15) ;entrada numeros do vetor
        MOV.W #5,2(R15); 
        MOV.W #5,4(R15); 
        MOV.W #5,6(R15); 
        MOV.W #2,8(R15); 
        MOV.W #1,10(R15);
        MOV.W #1,R6
        MOV.W #1,R7    
        CMP R6,R5
        JEQ fim
        INC.W R6
        CMP 2(R15),0(R15)
        JL fim
        INC.W R7
        CMP R6,R5
        JEQ fim
        INC.W R6
        CMP 4(R15),2(R15)
        JL fim
        INC.W R7
        CMP R6,R5
        JEQ fim
        INC.W R6
        CMP 6(R15),4(R15)
        JL fim
        INC.W R7
        CMP R6,R5
        JEQ fim
        INC.W R6
        CMP 8(R4),6(R4)
        JL fim
        INC.W R7
        CMP R6,R5
        JEQ fim
        INC.W R6
        CMP 10(R4),8(R4)
        JL fim
        INC.W R7
fim:
      CMP R7,R5
      JEQ retornaum
      MOV.W #0, R15
      JMP finalmesmo
retornaum:
      MOV #1,R15
finalmesmo:
              RET
	      
9. Escreva uma sub-rotina na linguagem Assembly do MSP430 que calcula o produto escalar de dois vetores, 'a' e 'b':

PRODUTOESCALAR:

        MOV.W #4,0(R12) ;entrada numeros do vetor A
        MOV.W #3,2(R12); 
        MOV.W #2,4(R12); 
        MOV.W #1,6(R12); 
    
        MOV.W #1,0(R14) ;entrada numeros do vetor B
        MOV.W #1,2(R14); 
        MOV.W #1,4(R14); 
        MOV.W #1,6(R14); 
        
       MOV.W 0(R12),R8
       MOV.W 0(R12), R10
       MOV.W 0(R14),R5
       MOV.W #1,R7
       call #MULTIPLICACAO
       MOV.W R10, 0(R13)
       
       MOV.W 2(R12),R8
       MOV.W 2(R12), R10
       MOV.W 2(R14),R5
       MOV.W #1,R7
       call #MULTIPLICACAO
       MOV.W R10, 2(R13)
       
       MOV.W 4(R12),R8
       MOV.W 4(R12), R10
       MOV.W 4(R14),R5
       MOV.W #1,R7
       call #MULTIPLICACAO
       MOV.W R10, 4(R13)
       
       MOV.W 6(R12),R8
       MOV.W 6(R12), R10
       MOV.W 6(R14),R5
       MOV.W #1,R7
       call #MULTIPLICACAO
       MOV.W R10, 6(R13)
       
       ADD 0(R13),2(R13)
       ADD 2(R13),4(R13)
       ADD 4(R13),6(R13)
       JMP acaba
       
MULTIPLICACAO:
         CMP R7, R5
         JEQ amult
         ADD.W #1,R7
         ADD.W R8,R10
         jmp MULTIPLICACAO
amult:
          RET
          
acaba: 
          MOV.W 6(R13),R15
          
          RET
	  
O primeiro endereço do vetor 'a' deverá ser passado através do registrador R15, o primeiro endereço do vetor 'b' deverá ser passado através do registrador R14, e o tamanho do vetor deverá ser passado pelo registrador R13. A saída deverá ser fornecida no registrador R15.

10. (a) Escreva uma função em C que indica se um vetor é palíndromo. Por exemplo:
	[1 2 3 2 1] e [0 10 20 20 10 0] são palíndromos.
	[5 4 3 2 1] e [1 2 3 2] não são.
Se o vetor for palíndromo, retorne o valor 1. Caso contrário, retorne o valor 0. O protótipo da função é:

    int Palindromo(int vetor[ ], int tamanho){
    int i,j;
    int m;
    int confere;
    int normal[tamanho];
    int inverso[tamanho];
    confere = 0;
    m = tamanho - 1;
    for(i = 0;i < tamanho;i++){
    normal[i]=vetor[i];
    inverso[m-i] = vetor[i];
    }
    for(j = 0; j <tamanho ;j++){
    if (normal[j] == inverso[j]){
        confere++;
    }
}
    if (confere == tamanho){
        return 1;
    }else return 0;
}

(b) Escreva a sub-rotina equivalente na linguagem Assembly do MSP430. O endereço do vetor de entrada é dado pelo registrador R15, o tamanho do vetor é dado pelo registrador R14, e o resultado é dado pelo registrador R15.

PALINDROMO:

        MOV.W #4,0(R12) ;entrada numeros do vetor A
        MOV.W #2,2(R12); 
        MOV.W #2,4(R12); 
        MOV.W #4,6(R12); 
    
       MOV 0(R12),6(R15)
       MOV 2(R12),4(R15)
       MOV 4(R12),2(R15)
       MOV 6(R12),0(R15)
       
       CMP 0(R12),0(R15)
       JNE naoeh
       

       CMP 2(R12),2(R15)
       JNE naoeh
       

       CMP 4(R12),4(R15)
       JNE naoeh
       

       CMP 6(R12),6(R15)
       JNE naoeh
       MOV.W #1, R15
       JMP acaba
       
naoeh:
       MOV #0,R15
acaba:
       RET
